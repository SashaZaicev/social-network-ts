{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/img/nullPhoto.png","components/img/gold1.jpg","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","autoFocus","onBlur","updateStatus","ProfileInfo","profile","isOwner","savePhoto","Preloader","aboutMe","accVK","contacts","vk","accFacebook","facebook","newPhotoUser","photos","large","photoUser","className","s","contentImg","src","img1","alt","descriptionBlock","profileBlock","fullName","lookingForAJob","profileImage","profileImageContainer","htmlFor","addFileField","id","title","type","target","files","profileInfo","Post","item","message","likeCount","MyPosts","postsElements","posts","map","p","style","postBlock","AddPostReduxForm","onSubmit","values","addPost","newPostText","maxLength10","maxLengthCreator","reduxForm","form","handleSubmit","Field","component","Textarea","name","validate","required","placeholder","btnStyle","MyPostsContainer","connect","state","profilePage","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","React","Component","compose","auth","isAuth","withRouter"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,WAAa,gCAAgC,iBAAmB,sCAAsC,aAAe,kCAAkC,aAAe,kCAAkC,sBAAwB,2CAA2C,aAAe,kCAAkC,YAAc,mC,oBCA5VD,EAAOC,QAAU,CAAC,MAAQ,uBAAuB,UAAY,2BAA2B,SAAW,4B,oBCAnGD,EAAOC,QAAU,CAAC,KAAO,qB,qHCDV,MAA0B,sCCA1B,MAA0B,kC,sBCI1B,SAASC,EAAeC,EAAKC,GAC1C,OCLa,SAAyBD,GACtC,GAAIE,MAAMC,QAAQH,GAAM,OAAOA,EDIxB,CAAeA,IELT,SAA+BA,EAAKC,GACjD,GAAsB,qBAAXG,QAA4BA,OAAOC,YAAYC,OAAON,GAAjE,CACA,IAAIO,EAAO,GACPC,GAAK,EACLC,GAAK,EACLC,OAAKC,EAET,IACE,IAAK,IAAiCC,EAA7BC,EAAKb,EAAII,OAAOC,cAAmBG,GAAMI,EAAKC,EAAGC,QAAQC,QAChER,EAAKS,KAAKJ,EAAGK,QAEThB,GAAKM,EAAKW,SAAWjB,GAH8CO,GAAK,IAK9E,MAAOW,GACPV,GAAK,EACLC,EAAKS,EACL,QACA,IACOX,GAAsB,MAAhBK,EAAW,QAAWA,EAAW,SAC5C,QACA,GAAIJ,EAAI,MAAMC,GAIlB,OAAOH,GFnBuB,CAAqBP,EAAKC,IAAM,OAAAmB,EAAA,GAA2BpB,EAAKC,IGLjF,WACb,MAAM,IAAIoB,UAAU,6IHIgF,G,WIyCvFC,EAlCwC,SAACC,GAAW,IAAD,IAC1BC,oBAAS,GADiB,GACnDC,EADmD,KACzCC,EADyC,SAE9BF,mBAASD,EAAMI,QAFe,GAEnDA,EAFmD,KAE3CC,EAF2C,KAI1DC,qBAAU,WACND,EAAUL,EAAMI,UACjB,CAACJ,EAAMI,SAYV,OACI,iCACMF,GACF,8BACI,sBAAMK,cAXQ,WACtBJ,GAAY,IAUJ,SAAyCH,EAAMI,QAAU,aAE5DF,GACD,8BACI,uBAAOR,MAAOU,EAAQI,SAlBX,SAACC,GACpBJ,EAAUI,EAAEC,cAAchB,QAiB8BiB,WAAW,EAAMC,OAZjD,WACxBT,GAAY,GACZH,EAAMa,aAAaT,YCqDhBU,EA9DiC,SAAC,GAAyD,IAAxDC,EAAuD,EAAvDA,QAASF,EAA8C,EAA9CA,aAAcT,EAAgC,EAAhCA,OAAQY,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,UACtF,IAAKF,EACD,OAAO,cAACG,EAAA,EAAD,IAEX,IAAIC,EAAUJ,EAAQI,QAKlBC,EAAQL,EAAQM,SAASC,GAEzB,iCACAP,EAAQM,SAASC,GAEjBC,EAAcR,EAAQM,SAASG,SAO/BC,EAAeV,EAAQW,OAAOC,MAC5BZ,EAAQW,OAAOC,MACfC,EAMN,OACI,gCACI,8BAAK,qBAAKC,UAAWC,IAAEC,WAAYC,IAAKC,EAAMC,IAAI,OAClD,sBAAKL,UAAWC,IAAEK,iBAAlB,UACI,sBAAKN,UAAWC,IAAEM,aAAlB,UACI,gCAAMrB,EAAQsB,SACTtB,EAAQuB,kBACb,sBAAKT,UAAWC,IAAES,aAAlB,UACI,sBAAKV,WAAYb,GAAWc,IAAEU,sBAA9B,UACI,qBAAKR,IAAKP,EAAcS,IAAI,MAC1BlB,GACF,wBAAOyB,QAAQ,cAAcZ,UAAWC,IAAEY,aAA1C,yBAEI,uBAAOC,GAAG,cAAcC,MAAM,SAASC,KAAK,OACrCrC,SAnBP,SAACC,GACrBA,EAAEqC,OAAOC,MAAMpD,QACfsB,EAAUR,EAAEqC,OAAOC,MAAM,aAoBb,cAAC,EAAD,CAAwBlC,aAAcA,EAAcT,OAAQA,UAGpE,qBAAKyB,UAAWC,IAAEkB,YAAlB,SACI,+BACI,4CAAe7B,KACf,sCAASC,KACT,4CAAeG,iB,4CCnDxB0B,EATF,SAACjD,GACV,OACI,sBAAK6B,UAAWC,IAAEoB,KAAlB,UACI,qBAAKlB,IAZD,wFAYeE,IAAI,KAAKlC,EAAMmD,QAClC,8BAAK,yCAAYnD,EAAMoD,mB,iCC+CpBC,EAvC2B,SAACrD,GACnC,IAAIsD,EAAgBtD,EAAMuD,MAAMC,KAAI,SAACC,GAAD,OAAQ,cAAC,EAAD,CAExCd,GAAIc,EAAEd,GACNQ,QAASM,EAAEN,QACXC,UAAWK,EAAEL,WAHRK,EAAEd,OAaX,OACI,sBAAKd,UAAW6B,IAAMC,UAAtB,UACI,yCACA,8BACI,cAACC,EAAD,CAAkBC,SAZd,SAACC,GACb9D,EAAM+D,QAAQD,EAAOE,kBAqBjB,qBAAKnC,UAAW6B,IAAMH,MAAtB,SACKD,QAWfW,EAAcC,YAAiB,IAa/BN,EAAmBO,YAAU,CAACC,KAAM,sBAAjBD,EAXL,SAACnE,GACjB,OACI,uBAAM6D,SAAU7D,EAAMqE,aAAtB,UACI,8BAAK,cAACC,EAAA,EAAD,CAAOC,UAAWC,IAAUC,KAAM,cAC3BC,SAAU,CAACC,IAASV,GAAcW,YAAa,sBAE3D,8BACI,wBAAQ/C,UAAW6B,IAAMmB,SAAzB,8B,QCzBDC,EADUC,aAlBd,SAACC,GACR,MAAO,CACHzB,MAAOyB,EAAMC,YAAY1B,SAgBM,CAACQ,aAAfgB,CAAyB1B,GClBnC6B,EAhB6B,SAAClF,GAEzC,OACI,gCACI,cAAC,EAAD,2BAAiBA,GAAjB,IACae,QAASf,EAAMe,QACfX,OAAQJ,EAAMI,OACdS,aAAcb,EAAMa,aACpBG,QAAShB,EAAMgB,QACfC,UAAWjB,EAAMiB,aAE9B,cAAC,EAAD,Q,eCINkE,E,oKACF,WACI,IAAIC,EAASC,KAAKrF,MAAMsF,MAAMC,OAAOH,OAChCA,IACDA,EAASC,KAAKrF,MAAMwF,mBAEhBH,KAAKrF,MAAMyF,QAAQhG,KAAK,UAGhC4F,KAAKrF,MAAM0F,eAAeN,GAC1BC,KAAKrF,MAAM2F,UAAUP,K,+BAGzB,WACIC,KAAKO,mB,gCAGT,SAAmBC,EAAgCC,EAAyBC,GACpEV,KAAKrF,MAAMsF,MAAMC,OAAOH,SAAWS,EAAUP,MAAMC,OAAOH,QAC1DC,KAAKO,mB,oBAIb,WAEI,OACI,8BACI,cAAC,EAAD,2BAAaP,KAAKrF,OAAlB,IACSgB,UAAWqE,KAAKrF,MAAMsF,MAAMC,OAAOH,OACnCrE,QAASsE,KAAKrF,MAAMe,QACpBX,OAAQiF,KAAKrF,MAAMI,OACnBS,aAAcwE,KAAKrF,MAAMa,aACzBI,UAAWoE,KAAKrF,MAAMiB,mB,GAhChB+E,IAAMC,WA8CtBC,sBACXnB,aARO,SAACC,GAAD,MAA2B,CAClCjE,QAASiE,EAAMC,YAAYlE,QAC3BX,OAAQ4E,EAAMC,YAAY7E,OAC1BoF,iBAAkBR,EAAMmB,KAAKxD,GAC7ByD,OAAQpB,EAAMmB,KAAKC,UAIL,CAACV,mBAAgBC,cAAW9E,iBAAcI,gBACxDoF,IAFWH,CAIbf","file":"static/js/3.3cecb485.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contentImg\":\"ProfileInfo_contentImg__wc8Sg\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__23XPP\",\"profileBlock\":\"ProfileInfo_profileBlock__3yisa\",\"profileImage\":\"ProfileInfo_profileImage__2Toyw\",\"profileImageContainer\":\"ProfileInfo_profileImageContainer__Hba9L\",\"addFileField\":\"ProfileInfo_addFileField__3RFeL\",\"profileInfo\":\"ProfileInfo_profileInfo__1HOtE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"MyPosts_posts__1AFQB\",\"postBlock\":\"MyPosts_postBlock__3FKY5\",\"btnStyle\":\"MyPosts_btnStyle__2gt4s\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__cvmsW\"};","export default __webpack_public_path__ + \"static/media/nullPhoto.a579c343.png\";","export default __webpack_public_path__ + \"static/media/gold1.dae80333.jpg\";","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n//@ts-ignore\r\nimport s from \"../ProfileInfo/ProfileInfo.module.css\";\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\n\r\ntype OwnPropsType = ProfileStatusPropsType\r\n\r\nconst ProfileStatusWithHooks: React.FC<OwnPropsType> = (props) => {\r\n        const [editMode, setEditMode] = useState(false)\r\n        const [status, setStatus] = useState(props.status)\r\n\r\n        useEffect(() => {\r\n            setStatus(props.status)\r\n        }, [props.status]);\r\n\r\n        const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n            setStatus(e.currentTarget.value)\r\n        };\r\n        const activatedEditMode = () => {\r\n            setEditMode(true)\r\n        }\r\n        const deactivatedEditMode = () => {\r\n            setEditMode(false)\r\n            props.updateStatus(status)\r\n        }\r\n        return (\r\n            <div>\r\n                {!editMode &&\r\n                <div>\r\n                    <span onDoubleClick={activatedEditMode}>{props.status || '======'}</span>\r\n                </div>}\r\n                {editMode &&\r\n                <div>\r\n                    <input value={status} onChange={onStatusChange} autoFocus={true} onBlur={deactivatedEditMode}\r\n                    />\r\n                </div>}\r\n            </div>\r\n        );\r\n    }\r\n;\r\n\r\nexport default ProfileStatusWithHooks;","import React from 'react';\r\n//@ts-ignore\r\nimport s from \"../ProfileInfo/ProfileInfo.module.css\";\r\n//@ts-ignore\r\nimport photoUser from \"../../img/nullPhoto.png\"\r\n//@ts-ignore\r\nimport img1 from \"../../img/gold1.jpg\";\r\nimport Preloader from \"../../../common/Preloader/Preloader\";\r\nimport {ProfileInfoType} from \"../../../redux/store\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\n\r\nexport type ProfilePropsType = {\r\n    profile: ProfileInfoType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: any\r\n    savePhoto: (photo: string) => void\r\n}\r\n\r\nconst ProfileInfo: React.FC<ProfilePropsType> = ({profile, updateStatus, status, isOwner, savePhoto}) => {\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n    let aboutMe = profile.aboutMe\r\n    // ?\r\n    // 'Write a little about yourself' :\r\n    // props.profile.aboutMe;\r\n\r\n    let accVK = profile.contacts.vk\r\n        ?\r\n        'Write here your account vk.com' :\r\n        profile.contacts.vk;\r\n\r\n    let accFacebook = profile.contacts.facebook\r\n    // ?\r\n    // 'Write here your account facebook.com' :\r\n    // props.profile.contacts.facebook;\r\n\r\n    //нужно обдумать, как кнопкой менять фото\r\n\r\n    let newPhotoUser = profile.photos.large\r\n        ? profile.photos.large\r\n        : photoUser;\r\n    const onMainPhotoSelected = (e: any) => {\r\n        if (e.target.files.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <div><img className={s.contentImg} src={img1} alt=\"\"/></div>\r\n            <div className={s.descriptionBlock}>\r\n                <div className={s.profileBlock}>\r\n                    <div>{profile.fullName}\r\n                        {profile.lookingForAJob}</div>\r\n                    <div className={s.profileImage}>\r\n                        <div className={!isOwner && s.profileImageContainer}>\r\n                            <img src={newPhotoUser} alt=\"\"/>\r\n                            {!isOwner &&\r\n                            <label htmlFor=\"file-upload\" className={s.addFileField}>\r\n                                Change PHOTO\r\n                                <input id=\"file-upload\" title=' hello' type=\"file\"\r\n                                       onChange={onMainPhotoSelected}/></label>}\r\n                        </div>\r\n                        {/*<ProfileStatus updateStatus={props.updateStatus} status={props.status}/>*/}\r\n                        <ProfileStatusWithHooks updateStatus={updateStatus} status={status}/>\r\n                    </div>\r\n                </div>\r\n                <div className={s.profileInfo}>\r\n                    <ul>\r\n                        <li>About me: {aboutMe}</li>\r\n                        <li>VK: {accVK}</li>\r\n                        <li>Facebook: {accFacebook}</li>\r\n                    </ul>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\n// @ts-ignore\r\nimport s from './Post.module.css'\r\nconst imgLogo = 'https://image.freepik.com/free-vector/rabbit-gaming-mascot-e-sports-logo_74154-31.jpg'\r\n\r\nexport type PostPropsType = {\r\n    message: string,\r\n    likeCount: number,\r\n    id: number\r\n}\r\n\r\n\r\nconst Post = (props: PostPropsType) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src={imgLogo} alt=\"\"/>{props.message}\r\n            <div><span>Like {props.likeCount}</span></div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Post;","import React, {ChangeEvent} from 'react';\r\n//@ts-ignore\r\nimport style from './MyPosts.module.css'\r\nimport Post, {PostPropsType} from \"./Post/Post\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../../common/FormsControls/FormsControls\";\r\n\r\n// export interface PostPropsTypes {\r\n//     message: string,\r\n//     likeCount: number,\r\n//     id: number\r\n// }\r\n\r\nexport type PostsPropsType = {\r\n    posts: Array<PostPropsType>\r\n    newPostText: string\r\n    updatePostChange: (newPostChange: string) => void\r\n    addPost: (values: string) => void\r\n\r\n}\r\n// {id: 2, message: \"Post1\", likeCount: 123}\r\n// Type 'PostPropsType[]' is not assignable to type 'PostType[]'.\r\n\r\nconst MyPosts: React.FC<PostsPropsType> = (props) => {\r\n        let postsElements = props.posts.map((p) => (<Post\r\n            key={p.id}\r\n            id={p.id}\r\n            message={p.message}\r\n            likeCount={p.likeCount}/>))\r\n\r\n        let onAddPost = (values: any) => {\r\n            props.addPost(values.newPostText)\r\n        }\r\n        // let onPostChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        //     let newPostChange = e.currentTarget.value\r\n        //     props.updatePostChange(newPostChange)\r\n        // }\r\n\r\n        return (\r\n            <div className={style.postBlock}>\r\n                <h3>My post</h3>\r\n                <div>\r\n                    <AddPostReduxForm onSubmit={onAddPost}/>\r\n                    {/*<div>*/}\r\n                    {/*    <textarea*/}\r\n                    {/*        onChange={onPostChange}*/}\r\n                    {/*        value={props.newPostText}/>*/}\r\n                    {/*</div>*/}\r\n                    {/*<div>*/}\r\n                    {/*    <button onClick={onAddPost}>Add post</button>*/}\r\n                    {/*</div>*/}\r\n                </div>\r\n                <div className={style.posts}>\r\n                    {postsElements}\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n            ;\r\n    }\r\n;\r\n\r\nexport default MyPosts;\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nconst AddPostForm = (props: any) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div><Field component={Textarea} name={'newPostText'}\r\n                        validate={[required,maxLength10]} placeholder={'Enter your post'}/>\r\n            </div>\r\n            <div>\r\n                <button className={style.btnStyle}>Add post</button>\r\n            </div>\r\n        </form>)\r\n}\r\nconst AddPostReduxForm = reduxForm({form: 'profileAddPostForm'})(AddPostForm);","import {addPost} from \"../../../redux/profileReducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootStateType} from \"../../../redux/store\";\r\n\r\n// export type PostsPropsType = {\r\n//     store: any\r\n//     // posts: Array<PostPropsType>\r\n//     // newPostText: any\r\n//     dispatch: (action: ActionsTypes) => void\r\n\r\n// }\r\n\r\n//\r\n// const MyPostsContainer = (props: any) => {\r\n//\r\n//         let addPost = () => {\r\n//             props.dispatch(addPostAC(props.store.newPostText))\r\n//         }\r\n//         let updatePostChange = (newPostChange: string) => {\r\n//             props.dispatch(onPostChangeAC(newPostChange))\r\n//         }\r\n//         return (\r\n//             <MyPosts posts={props.store.posts}\r\n//                      updatePostChange={updatePostChange}\r\n//                      addPost={addPost}\r\n//                      newPostText={props.store.newPostText}/>\r\n//         )\r\n//     }\r\n// ;\r\nlet mStp = (state: RootStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        // newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\n// let mDtp = (dispatch: Dispatch) => {\r\n//     return {\r\n//         updatePostChange: (newPostChange: string) => {\r\n//             dispatch(updatePostChange(newPostChange))\r\n//         },\r\n//         addPost: (newPostText: string) => {\r\n//             dispatch(addPost(newPostText))\r\n//         }\r\n//     }\r\n// }\r\n\r\nconst MyPostsContainer = connect(mStp, {addPost})(MyPosts);\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileInfoType} from \"../../redux/store\";\r\n\r\nexport type ProfilePropsType = {\r\n    profile: ProfileInfoType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (photo: string) => void\r\n}\r\n\r\n\r\nconst Profile: React.FC<ProfilePropsType> = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo {...props}\r\n                         profile={props.profile}\r\n                         status={props.status}\r\n                         updateStatus={props.updateStatus}\r\n                         isOwner={props.isOwner}\r\n                         savePhoto={props.savePhoto}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {ProfileInfoType, RootStateType} from \"../../redux/store\";\r\nimport {getStatus, getUserProfile, savePhoto, updateStatus} from \"../../redux/profileReducer\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\ntype PathParamsType = {\r\n    userId: any  // может быть string or underfined\r\n\r\n\r\n}\r\ntype MapStatePropsType = {\r\n    profile: ProfileInfoType\r\n    status: string\r\n    authorizedUserId: any\r\n    // isAuth: boolean\r\n}\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (photo: string) => void\r\n}\r\ntype OwnPropsType = MapStatePropsType & MapDispatchPropsType\r\nexport type PropsType = RouteComponentProps<PathParamsType> & OwnPropsType\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <Profile {...this.props}\r\n                         isOwner={!!this.props.match.params.userId}\r\n                         profile={this.props.profile}\r\n                         status={this.props.status}\r\n                         updateStatus={this.props.updateStatus}\r\n                         savePhoto={this.props.savePhoto}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nlet mstp = (state: RootStateType) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.id,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mstp, {getUserProfile, getStatus, updateStatus, savePhoto}),\r\n    withRouter,\r\n    // withAuthRedirect\r\n)(ProfileContainer)\r\n\r\n// let AuthRedirectComponent = withAuthRedirect(ProfileContainer)\r\n// let WithUrlDataContainerComponent = withRouter(AuthRedirectComponent)\r\n// export default connect(mstp, {getUserProfile})(WithUrlDataContainerComponent);"],"sourceRoot":""}