{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","hoc/WithAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","Message","props","className","s","message","DialogItem","path","id","dialog","activeClassName","active","to","name","maxLength100","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","style","btnStyle","Dialogs","messagesElements","dialogsPage","messages","map","m","dialogsElements","dialogs","d","dialogsTitle","dialogsItems","textAreaDialogs","values","addMessage","newMessageBody","mapStateToPropsForRedirect","state","isAuth","auth","compose","connect","dispatch","addMessageAC","Component","RedirectComponent","this","React"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,SAAW,0BAA0B,gBAAkB,iCAAiC,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,aAAe,gC,8FCMnSC,EAAqC,SAACC,GAC/C,OACI,qBAAKC,UAAWC,IAAEC,QAAlB,SAA4BH,EAAMG,W,QCC7BC,EAA4C,SAACJ,GACtD,IAAIK,EAAO,YAAcL,EAAMM,GAC/B,OACI,qBAAKL,UAAWC,IAAEK,OAAlB,SACI,cAAC,IAAD,CAASC,gBAAiBN,IAAEO,OACnBC,GAAIL,EADb,SACoBL,EAAMW,U,iCCRhCC,EAAeC,YAAiB,KAavBC,cAAU,CAACC,KAAM,wBAAjBD,EAXQ,SAACd,GACpB,OACI,uBAAMgB,SAAUhB,EAAMiB,aAAtB,UACI,8BAAK,cAACC,EAAA,EAAD,CAAOC,UAAWC,IAAUC,SAAU,CAACC,IAAUV,GAAeD,KAAM,iBAC/DY,YAAa,yBAEzB,8BACI,wBAAQtB,UAAWuB,IAAMC,SAAzB,iCC4CDC,EAxC6B,SAAC1B,GACzC,IAAI2B,EAAmB3B,EAAM4B,YAAYC,SAASC,KAAI,SAACC,GAAD,OAAY,cAAC,EAAD,CAE9DzB,GAAIyB,EAAEzB,GACNH,QAAS4B,EAAE5B,SAFN4B,EAAEzB,OAIP0B,EAAkBhC,EAAM4B,YAAYK,QAAQH,KAAI,SAACI,GAAD,OAAY,cAAC,EAAD,CAE5D5B,GAAI4B,EAAE5B,GACNK,KAAMuB,EAAEvB,MAFHuB,EAAE5B,OAaX,OACI,sBAAKL,UAAWuB,IAAMS,QAAtB,UACI,qBAAKhC,UAAWuB,IAAMW,aAAtB,sBACA,qBAAKlC,UAAWuB,IAAMY,aAAtB,SACKJ,IAEL,qBAAK/B,UAAWuB,IAAMK,SAAtB,SACKF,IAEL,uBACA,qBAAK1B,UAAWuB,IAAMa,gBAAtB,SACI,8BACI,cAAC,EAAD,CAAgBrB,SApBZ,SAACsB,GACjBtC,EAAMuC,WAAWD,EAAOE,2B,uDCxB5BC,EAA6B,SAACC,GAAD,MAA0C,CACvEC,OAAQD,EAAME,KAAKD,S,OCwBRE,sBAA6BC,aA1BjC,SAACJ,GACR,MAAO,CACHd,YAAac,EAAMd,gBAShB,SAACmB,GACR,MAAO,CACHR,WAAY,SAACC,GACTO,EAASC,YAAaR,UDNF,SAACS,GAAkC,IACzDC,EADwD,4JAE1D,WACI,OAAKC,KAAKnD,MAAM2C,OACT,cAACM,EAAD,eAAeE,KAAKnD,QADI,cAAC,IAAD,CAAUU,GAAI,eAHS,GAC9B0C,IAAMH,WAQtC,OAAOH,YAAQL,EAARK,CAAoCI,KCShCL,CAAoEnB","file":"static/js/4.891affb8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1GVEm\",\"dialogsItems\":\"Dialogs_dialogsItems__2mN3u\",\"messages\":\"Dialogs_messages__1Mzrb\",\"textAreaDialogs\":\"Dialogs_textAreaDialogs__14nSO\",\"dialog\":\"Dialogs_dialog__DzAwy\",\"active\":\"Dialogs_active__21hsj\",\"btnStyle\":\"Dialogs_btnStyle__2w_0v\",\"dialogsTitle\":\"Dialogs_dialogsTitle__1fxrD\"};","import s from \"../Dialogs.module.css\";\r\nimport React from \"react\";\r\n\r\nexport type MessagePropsType = {\r\n    message: string\r\n    id:string\r\n}\r\nexport const Message:React.FC<MessagePropsType> = (props) => {\r\n    return (\r\n        <div className={s.message}>{props.message}</div>)\r\n}","import React from 'react';\r\n//@ts-ignore\r\nimport s from \"../Dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport type DialogItemPropsType = {\r\n    name: string\r\n    id: string\r\n}\r\n\r\nexport const DialogItem: React.FC<DialogItemPropsType> = (props) => {\r\n    let path = '/dialogs/' + props.id;\r\n    return (\r\n        <div className={s.dialog}>\r\n            <NavLink activeClassName={s.active}\r\n                     to={path}>{props.name}\r\n            </NavLink></div>\r\n    )\r\n}","import {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../../common/FormsControls/FormsControls\";\r\nimport React from \"react\";\r\n//@ts-ignore\r\nimport style from '../Dialogs.module.css'\r\n\r\nconst maxLength100 = maxLengthCreator(100)\r\n\r\nconst AddMessageForm = (props: any) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div><Field component={Textarea} validate={[required, maxLength100]} name={'newMessageBody'}\r\n                        placeholder={'Enter your message'}/>\r\n            </div>\r\n            <div>\r\n                <button className={style.btnStyle}>Add message</button>\r\n            </div>\r\n        </form>)\r\n}\r\nexport default reduxForm({form: 'dialogAddMessageForm'})(AddMessageForm);\r\n","import React from 'react';\r\n//@ts-ignore\r\nimport style from './Dialogs.module.css'\r\nimport {Message} from \"./Message/Message\";\r\nimport {DialogItem} from \"./DialogItem/DialogItem\";\r\nimport {DialogPageType} from \"../../redux/store\";\r\nimport AddMessageForm from \"./AddMessageForm/AddMessageForm\";\r\nimport {reduxForm} from 'redux-form';\r\n\r\n\r\ntype DialogsPropsType = {\r\n    dialogsPage: DialogPageType\r\n    // dispatch: (action: ActionsTypes) => void\r\n    updateNewMessageBody: (body: string) => void\r\n    addMessage: (newMessageBody: string) => void\r\n    newMessageBody: string\r\n    isAuth: boolean\r\n    addNewMessage: (values: string) => void\r\n}\r\n\r\nconst Dialogs: React.FC<DialogsPropsType> = (props) => {\r\n    let messagesElements = props.dialogsPage.messages.map((m: any) => <Message\r\n        key={m.id}\r\n        id={m.id}\r\n        message={m.message}\r\n    />)\r\n    let dialogsElements = props.dialogsPage.dialogs.map((d: any) => <DialogItem\r\n        key={d.id}\r\n        id={d.id}\r\n        name={d.name}\r\n    />)\r\n\r\n    let addNewMessage = (values: any) => {\r\n        props.addMessage(values.newMessageBody)\r\n    }\r\n    // let changeMessage = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n    //     let body = e.currentTarget.value\r\n    //     props.updateNewMessageBody(body);\r\n    // }\r\n\r\n    return (\r\n        <div className={style.dialogs}>\r\n            <div className={style.dialogsTitle}>Messages</div>\r\n            <div className={style.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={style.messages}>\r\n                {messagesElements}\r\n            </div>\r\n            <br/>\r\n            <div className={style.textAreaDialogs}>\r\n                <div>\r\n                    <AddMessageForm onSubmit={addNewMessage}/>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dialogs;","import {Redirect} from \"react-router-dom\";\r\nimport React, {Component} from \"react\";\r\nimport {RootStateType} from \"../redux/store\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype AuthPropsType = {\r\n    isAuth: boolean,\r\n}\r\n\r\nlet mapStateToPropsForRedirect = (state: RootStateType): AuthPropsType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\n// export function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n\r\nexport const withAuthRedirect = (Component: React.ElementType) => {\r\n    class RedirectComponent extends React.Component<AuthPropsType> {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to={\"/login\"}/>\r\n            return <Component {...this.props}\r\n            />\r\n        }\r\n    }\r\n\r\n    return connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n    // let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n    //\r\n    // return ConnectedAuthRedirectComponent;\r\n}","import React from 'react';\r\nimport {RootStateType} from \"../../redux/store\";\r\nimport {addMessageAC} from \"../../redux/dialogsReducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from 'react-redux';\r\nimport {withAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nlet mStp = (state: RootStateType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n        // newMessageBody: state.dialogsPage.newMessageBody,\r\n        // isAuth: state.auth.isAuth\r\n    }\r\n}\r\n// (props:any) => {\r\n// if (!props.isAuth) return <Redirect to={\"/login\"}/>\r\n// return <Dialogs {...props}/>\r\n// }\r\nlet mDtp = (dispatch: any) => {\r\n    return {\r\n        addMessage: (newMessageBody: string) => {\r\n            dispatch(addMessageAC(newMessageBody))\r\n        },\r\n        // updateNewMessageBody: (body: string) => {\r\n        //     dispatch(updateNewMessageBodyAC(body));\r\n        // }\r\n    }\r\n}\r\n\r\n\r\n// let AuthRedirectComponent = withAuthRedirect(Dialogs)\r\n// const DialogsContainer = connect(mStp, mDtp)(AuthRedirectComponent);\r\n// export default DialogsContainer;\r\nexport default compose<React.ComponentType>(connect(mStp, mDtp), withAuthRedirect)(Dialogs);"],"sourceRoot":""}